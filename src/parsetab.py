
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CHAR ELSE FOR IDENTIFIER IF INT NUMBER OPERATOR PRINTF PUNCTUATION RETURN SCANF STRING WHILEprogram : statement_liststatement_list : statement_list statement\n| statementstatement : declaration\n| assignment\n| if_statement\n| while_statement\n| return_statement\n| call_statementdeclaration : type_specifier IDENTIFIER PUNCTUATIONtype_specifier : INT\n| CHARassignment : IDENTIFIER OPERATOR expression PUNCTUATIONexpression : NUMBER\n| IDENTIFIER\n| STRINGexpression : expression OPERATOR expressionif_statement : IF PUNCTUATION expression PUNCTUATION compound_stmt\n| IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmtwhile_statement : WHILE PUNCTUATION expression PUNCTUATION compound_stmtreturn_statement : RETURN expression PUNCTUATIONcompound_stmt : PUNCTUATION statement_list PUNCTUATIONcall_statement : function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATIONfunction_name : IDENTIFIER\n| PRINTF\n| SCANFargument_list : argument_list PUNCTUATION expression\n| expression\n| emptyempty :'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,14,16,17,20,22,23,24,29,30,34,35,39,43,44,45,46,47,49,51,52,],[11,11,-3,-4,-5,-6,-7,-8,-9,21,27,-11,-12,-2,27,27,27,27,-10,-21,27,-13,27,11,-18,-20,-23,11,-22,-19,]),'IF':([0,2,3,4,5,6,7,8,9,20,30,34,39,44,45,46,47,49,51,52,],[12,12,-3,-4,-5,-6,-7,-8,-9,-2,-10,-21,-13,12,-18,-20,-23,12,-22,-19,]),'WHILE':([0,2,3,4,5,6,7,8,9,20,30,34,39,44,45,46,47,49,51,52,],[13,13,-3,-4,-5,-6,-7,-8,-9,-2,-10,-21,-13,13,-18,-20,-23,13,-22,-19,]),'RETURN':([0,2,3,4,5,6,7,8,9,20,30,34,39,44,45,46,47,49,51,52,],[14,14,-3,-4,-5,-6,-7,-8,-9,-2,-10,-21,-13,14,-18,-20,-23,14,-22,-19,]),'INT':([0,2,3,4,5,6,7,8,9,20,30,34,39,44,45,46,47,49,51,52,],[16,16,-3,-4,-5,-6,-7,-8,-9,-2,-10,-21,-13,16,-18,-20,-23,16,-22,-19,]),'CHAR':([0,2,3,4,5,6,7,8,9,20,30,34,39,44,45,46,47,49,51,52,],[17,17,-3,-4,-5,-6,-7,-8,-9,-2,-10,-21,-13,17,-18,-20,-23,17,-22,-19,]),'PRINTF':([0,2,3,4,5,6,7,8,9,20,30,34,39,44,45,46,47,49,51,52,],[18,18,-3,-4,-5,-6,-7,-8,-9,-2,-10,-21,-13,18,-18,-20,-23,18,-22,-19,]),'SCANF':([0,2,3,4,5,6,7,8,9,20,30,34,39,44,45,46,47,49,51,52,],[19,19,-3,-4,-5,-6,-7,-8,-9,-2,-10,-21,-13,19,-18,-20,-23,19,-22,-19,]),'$end':([1,2,3,4,5,6,7,8,9,20,30,34,39,45,46,47,51,52,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-2,-10,-21,-13,-18,-20,-23,-22,-19,]),'PUNCTUATION':([3,4,5,6,7,8,9,11,12,13,15,18,19,20,21,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,],[-3,-4,-5,-6,-7,-8,-9,-24,23,24,29,-25,-26,-2,30,34,-14,-15,-16,-30,-10,39,40,41,-21,43,-28,-29,-13,44,44,-17,47,-18,-20,-23,-27,51,44,-22,-19,]),'OPERATOR':([11,25,26,27,28,31,32,33,37,42,48,],[22,35,-14,-15,-16,35,35,35,35,35,35,]),'NUMBER':([14,22,23,24,29,35,43,],[26,26,26,26,26,26,26,]),'STRING':([14,22,23,24,29,35,43,],[28,28,28,28,28,28,28,]),'ELSE':([45,51,],[50,-22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,44,],[2,49,]),'statement':([0,2,44,49,],[3,20,3,20,]),'declaration':([0,2,44,49,],[4,4,4,4,]),'assignment':([0,2,44,49,],[5,5,5,5,]),'if_statement':([0,2,44,49,],[6,6,6,6,]),'while_statement':([0,2,44,49,],[7,7,7,7,]),'return_statement':([0,2,44,49,],[8,8,8,8,]),'call_statement':([0,2,44,49,],[9,9,9,9,]),'type_specifier':([0,2,44,49,],[10,10,10,10,]),'function_name':([0,2,44,49,],[15,15,15,15,]),'expression':([14,22,23,24,29,35,43,],[25,31,32,33,37,42,48,]),'argument_list':([29,],[36,]),'empty':([29,],[38,]),'compound_stmt':([40,41,50,],[45,46,52,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',9),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',14),
  ('statement -> declaration','statement',1,'p_statement','parser.py',24),
  ('statement -> assignment','statement',1,'p_statement','parser.py',25),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',26),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',27),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',28),
  ('statement -> call_statement','statement',1,'p_statement','parser.py',29),
  ('declaration -> type_specifier IDENTIFIER PUNCTUATION','declaration',3,'p_declaration','parser.py',36),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',42),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',43),
  ('assignment -> IDENTIFIER OPERATOR expression PUNCTUATION','assignment',4,'p_assignment','parser.py',50),
  ('expression -> NUMBER','expression',1,'p_expression','parser.py',62),
  ('expression -> IDENTIFIER','expression',1,'p_expression','parser.py',63),
  ('expression -> STRING','expression',1,'p_expression','parser.py',64),
  ('expression -> expression OPERATOR expression','expression',3,'p_expression_binop','parser.py',68),
  ('if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt','if_statement',5,'p_if_statement','parser.py',75),
  ('if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt','if_statement',7,'p_if_statement','parser.py',76),
  ('while_statement -> WHILE PUNCTUATION expression PUNCTUATION compound_stmt','while_statement',5,'p_while_statement','parser.py',86),
  ('return_statement -> RETURN expression PUNCTUATION','return_statement',3,'p_return_statement','parser.py',93),
  ('compound_stmt -> PUNCTUATION statement_list PUNCTUATION','compound_stmt',3,'p_compound_stmt','parser.py',102),
  ('call_statement -> function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION','call_statement',5,'p_call_statement','parser.py',109),
  ('function_name -> IDENTIFIER','function_name',1,'p_function_name','parser.py',113),
  ('function_name -> PRINTF','function_name',1,'p_function_name','parser.py',114),
  ('function_name -> SCANF','function_name',1,'p_function_name','parser.py',115),
  ('argument_list -> argument_list PUNCTUATION expression','argument_list',3,'p_argument_list','parser.py',122),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',123),
  ('argument_list -> empty','argument_list',1,'p_argument_list','parser.py',124),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',133),
]
