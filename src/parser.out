Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FOR

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> declaration
Rule 5     statement -> assignment
Rule 6     statement -> if_statement
Rule 7     statement -> while_statement
Rule 8     statement -> return_statement
Rule 9     statement -> call_statement
Rule 10    declaration -> type_specifier IDENTIFIER PUNCTUATION
Rule 11    type_specifier -> INT
Rule 12    type_specifier -> CHAR
Rule 13    assignment -> IDENTIFIER OPERATOR expression PUNCTUATION
Rule 14    expression -> NUMBER
Rule 15    expression -> IDENTIFIER
Rule 16    expression -> STRING
Rule 17    expression -> expression OPERATOR expression
Rule 18    if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt
Rule 19    if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt
Rule 20    while_statement -> WHILE PUNCTUATION expression PUNCTUATION compound_stmt
Rule 21    return_statement -> RETURN expression PUNCTUATION
Rule 22    compound_stmt -> PUNCTUATION statement_list PUNCTUATION
Rule 23    call_statement -> function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION
Rule 24    function_name -> IDENTIFIER
Rule 25    function_name -> PRINTF
Rule 26    function_name -> SCANF
Rule 27    argument_list -> argument_list PUNCTUATION expression
Rule 28    argument_list -> expression
Rule 29    argument_list -> empty
Rule 30    empty -> <empty>

Terminals, with rules where they appear

CHAR                 : 12
ELSE                 : 19
FOR                  : 
IDENTIFIER           : 10 13 15 24
IF                   : 18 19
INT                  : 11
NUMBER               : 14
OPERATOR             : 13 17
PRINTF               : 25
PUNCTUATION          : 10 13 18 18 19 19 20 20 21 22 22 23 23 23 27
RETURN               : 21
SCANF                : 26
STRING               : 16
WHILE                : 20
error                : 

Nonterminals, with rules where they appear

argument_list        : 23 27
assignment           : 5
call_statement       : 9
compound_stmt        : 18 19 19 20
declaration          : 4
empty                : 29
expression           : 13 17 17 18 19 20 21 27 28
function_name        : 23
if_statement         : 6
program              : 0
return_statement     : 8
statement            : 2 3
statement_list       : 1 2 22
type_specifier       : 10
while_statement      : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . call_statement
    (10) declaration -> . type_specifier IDENTIFIER PUNCTUATION
    (13) assignment -> . IDENTIFIER OPERATOR expression PUNCTUATION
    (18) if_statement -> . IF PUNCTUATION expression PUNCTUATION compound_stmt
    (19) if_statement -> . IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt
    (20) while_statement -> . WHILE PUNCTUATION expression PUNCTUATION compound_stmt
    (21) return_statement -> . RETURN expression PUNCTUATION
    (23) call_statement -> . function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION
    (11) type_specifier -> . INT
    (12) type_specifier -> . CHAR
    (24) function_name -> . IDENTIFIER
    (25) function_name -> . PRINTF
    (26) function_name -> . SCANF

    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    RETURN          shift and go to state 14
    INT             shift and go to state 16
    CHAR            shift and go to state 17
    PRINTF          shift and go to state 18
    SCANF           shift and go to state 19

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    call_statement                 shift and go to state 9
    type_specifier                 shift and go to state 10
    function_name                  shift and go to state 15

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . call_statement
    (10) declaration -> . type_specifier IDENTIFIER PUNCTUATION
    (13) assignment -> . IDENTIFIER OPERATOR expression PUNCTUATION
    (18) if_statement -> . IF PUNCTUATION expression PUNCTUATION compound_stmt
    (19) if_statement -> . IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt
    (20) while_statement -> . WHILE PUNCTUATION expression PUNCTUATION compound_stmt
    (21) return_statement -> . RETURN expression PUNCTUATION
    (23) call_statement -> . function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION
    (11) type_specifier -> . INT
    (12) type_specifier -> . CHAR
    (24) function_name -> . IDENTIFIER
    (25) function_name -> . PRINTF
    (26) function_name -> . SCANF

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    RETURN          shift and go to state 14
    INT             shift and go to state 16
    CHAR            shift and go to state 17
    PRINTF          shift and go to state 18
    SCANF           shift and go to state 19

    statement                      shift and go to state 20
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    call_statement                 shift and go to state 9
    type_specifier                 shift and go to state 10
    function_name                  shift and go to state 15

state 3

    (3) statement_list -> statement .

    IDENTIFIER      reduce using rule 3 (statement_list -> statement .)
    IF              reduce using rule 3 (statement_list -> statement .)
    WHILE           reduce using rule 3 (statement_list -> statement .)
    RETURN          reduce using rule 3 (statement_list -> statement .)
    INT             reduce using rule 3 (statement_list -> statement .)
    CHAR            reduce using rule 3 (statement_list -> statement .)
    PRINTF          reduce using rule 3 (statement_list -> statement .)
    SCANF           reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    PUNCTUATION     reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> declaration .

    IDENTIFIER      reduce using rule 4 (statement -> declaration .)
    IF              reduce using rule 4 (statement -> declaration .)
    WHILE           reduce using rule 4 (statement -> declaration .)
    RETURN          reduce using rule 4 (statement -> declaration .)
    INT             reduce using rule 4 (statement -> declaration .)
    CHAR            reduce using rule 4 (statement -> declaration .)
    PRINTF          reduce using rule 4 (statement -> declaration .)
    SCANF           reduce using rule 4 (statement -> declaration .)
    $end            reduce using rule 4 (statement -> declaration .)
    PUNCTUATION     reduce using rule 4 (statement -> declaration .)


state 5

    (5) statement -> assignment .

    IDENTIFIER      reduce using rule 5 (statement -> assignment .)
    IF              reduce using rule 5 (statement -> assignment .)
    WHILE           reduce using rule 5 (statement -> assignment .)
    RETURN          reduce using rule 5 (statement -> assignment .)
    INT             reduce using rule 5 (statement -> assignment .)
    CHAR            reduce using rule 5 (statement -> assignment .)
    PRINTF          reduce using rule 5 (statement -> assignment .)
    SCANF           reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)
    PUNCTUATION     reduce using rule 5 (statement -> assignment .)


state 6

    (6) statement -> if_statement .

    IDENTIFIER      reduce using rule 6 (statement -> if_statement .)
    IF              reduce using rule 6 (statement -> if_statement .)
    WHILE           reduce using rule 6 (statement -> if_statement .)
    RETURN          reduce using rule 6 (statement -> if_statement .)
    INT             reduce using rule 6 (statement -> if_statement .)
    CHAR            reduce using rule 6 (statement -> if_statement .)
    PRINTF          reduce using rule 6 (statement -> if_statement .)
    SCANF           reduce using rule 6 (statement -> if_statement .)
    $end            reduce using rule 6 (statement -> if_statement .)
    PUNCTUATION     reduce using rule 6 (statement -> if_statement .)


state 7

    (7) statement -> while_statement .

    IDENTIFIER      reduce using rule 7 (statement -> while_statement .)
    IF              reduce using rule 7 (statement -> while_statement .)
    WHILE           reduce using rule 7 (statement -> while_statement .)
    RETURN          reduce using rule 7 (statement -> while_statement .)
    INT             reduce using rule 7 (statement -> while_statement .)
    CHAR            reduce using rule 7 (statement -> while_statement .)
    PRINTF          reduce using rule 7 (statement -> while_statement .)
    SCANF           reduce using rule 7 (statement -> while_statement .)
    $end            reduce using rule 7 (statement -> while_statement .)
    PUNCTUATION     reduce using rule 7 (statement -> while_statement .)


state 8

    (8) statement -> return_statement .

    IDENTIFIER      reduce using rule 8 (statement -> return_statement .)
    IF              reduce using rule 8 (statement -> return_statement .)
    WHILE           reduce using rule 8 (statement -> return_statement .)
    RETURN          reduce using rule 8 (statement -> return_statement .)
    INT             reduce using rule 8 (statement -> return_statement .)
    CHAR            reduce using rule 8 (statement -> return_statement .)
    PRINTF          reduce using rule 8 (statement -> return_statement .)
    SCANF           reduce using rule 8 (statement -> return_statement .)
    $end            reduce using rule 8 (statement -> return_statement .)
    PUNCTUATION     reduce using rule 8 (statement -> return_statement .)


state 9

    (9) statement -> call_statement .

    IDENTIFIER      reduce using rule 9 (statement -> call_statement .)
    IF              reduce using rule 9 (statement -> call_statement .)
    WHILE           reduce using rule 9 (statement -> call_statement .)
    RETURN          reduce using rule 9 (statement -> call_statement .)
    INT             reduce using rule 9 (statement -> call_statement .)
    CHAR            reduce using rule 9 (statement -> call_statement .)
    PRINTF          reduce using rule 9 (statement -> call_statement .)
    SCANF           reduce using rule 9 (statement -> call_statement .)
    $end            reduce using rule 9 (statement -> call_statement .)
    PUNCTUATION     reduce using rule 9 (statement -> call_statement .)


state 10

    (10) declaration -> type_specifier . IDENTIFIER PUNCTUATION

    IDENTIFIER      shift and go to state 21


state 11

    (13) assignment -> IDENTIFIER . OPERATOR expression PUNCTUATION
    (24) function_name -> IDENTIFIER .

    OPERATOR        shift and go to state 22
    PUNCTUATION     reduce using rule 24 (function_name -> IDENTIFIER .)


state 12

    (18) if_statement -> IF . PUNCTUATION expression PUNCTUATION compound_stmt
    (19) if_statement -> IF . PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt

    PUNCTUATION     shift and go to state 23


state 13

    (20) while_statement -> WHILE . PUNCTUATION expression PUNCTUATION compound_stmt

    PUNCTUATION     shift and go to state 24


state 14

    (21) return_statement -> RETURN . expression PUNCTUATION
    (14) expression -> . NUMBER
    (15) expression -> . IDENTIFIER
    (16) expression -> . STRING
    (17) expression -> . expression OPERATOR expression

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    STRING          shift and go to state 28

    expression                     shift and go to state 25

state 15

    (23) call_statement -> function_name . PUNCTUATION argument_list PUNCTUATION PUNCTUATION

    PUNCTUATION     shift and go to state 29


state 16

    (11) type_specifier -> INT .

    IDENTIFIER      reduce using rule 11 (type_specifier -> INT .)


state 17

    (12) type_specifier -> CHAR .

    IDENTIFIER      reduce using rule 12 (type_specifier -> CHAR .)


state 18

    (25) function_name -> PRINTF .

    PUNCTUATION     reduce using rule 25 (function_name -> PRINTF .)


state 19

    (26) function_name -> SCANF .

    PUNCTUATION     reduce using rule 26 (function_name -> SCANF .)


state 20

    (2) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 2 (statement_list -> statement_list statement .)
    INT             reduce using rule 2 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 2 (statement_list -> statement_list statement .)
    PRINTF          reduce using rule 2 (statement_list -> statement_list statement .)
    SCANF           reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    PUNCTUATION     reduce using rule 2 (statement_list -> statement_list statement .)


state 21

    (10) declaration -> type_specifier IDENTIFIER . PUNCTUATION

    PUNCTUATION     shift and go to state 30


state 22

    (13) assignment -> IDENTIFIER OPERATOR . expression PUNCTUATION
    (14) expression -> . NUMBER
    (15) expression -> . IDENTIFIER
    (16) expression -> . STRING
    (17) expression -> . expression OPERATOR expression

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    STRING          shift and go to state 28

    expression                     shift and go to state 31

state 23

    (18) if_statement -> IF PUNCTUATION . expression PUNCTUATION compound_stmt
    (19) if_statement -> IF PUNCTUATION . expression PUNCTUATION compound_stmt ELSE compound_stmt
    (14) expression -> . NUMBER
    (15) expression -> . IDENTIFIER
    (16) expression -> . STRING
    (17) expression -> . expression OPERATOR expression

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    STRING          shift and go to state 28

    expression                     shift and go to state 32

state 24

    (20) while_statement -> WHILE PUNCTUATION . expression PUNCTUATION compound_stmt
    (14) expression -> . NUMBER
    (15) expression -> . IDENTIFIER
    (16) expression -> . STRING
    (17) expression -> . expression OPERATOR expression

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    STRING          shift and go to state 28

    expression                     shift and go to state 33

state 25

    (21) return_statement -> RETURN expression . PUNCTUATION
    (17) expression -> expression . OPERATOR expression

    PUNCTUATION     shift and go to state 34
    OPERATOR        shift and go to state 35


state 26

    (14) expression -> NUMBER .

    PUNCTUATION     reduce using rule 14 (expression -> NUMBER .)
    OPERATOR        reduce using rule 14 (expression -> NUMBER .)


state 27

    (15) expression -> IDENTIFIER .

    PUNCTUATION     reduce using rule 15 (expression -> IDENTIFIER .)
    OPERATOR        reduce using rule 15 (expression -> IDENTIFIER .)


state 28

    (16) expression -> STRING .

    PUNCTUATION     reduce using rule 16 (expression -> STRING .)
    OPERATOR        reduce using rule 16 (expression -> STRING .)


state 29

    (23) call_statement -> function_name PUNCTUATION . argument_list PUNCTUATION PUNCTUATION
    (27) argument_list -> . argument_list PUNCTUATION expression
    (28) argument_list -> . expression
    (29) argument_list -> . empty
    (14) expression -> . NUMBER
    (15) expression -> . IDENTIFIER
    (16) expression -> . STRING
    (17) expression -> . expression OPERATOR expression
    (30) empty -> .

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    STRING          shift and go to state 28
    PUNCTUATION     reduce using rule 30 (empty -> .)

    argument_list                  shift and go to state 36
    expression                     shift and go to state 37
    empty                          shift and go to state 38

state 30

    (10) declaration -> type_specifier IDENTIFIER PUNCTUATION .

    IDENTIFIER      reduce using rule 10 (declaration -> type_specifier IDENTIFIER PUNCTUATION .)
    IF              reduce using rule 10 (declaration -> type_specifier IDENTIFIER PUNCTUATION .)
    WHILE           reduce using rule 10 (declaration -> type_specifier IDENTIFIER PUNCTUATION .)
    RETURN          reduce using rule 10 (declaration -> type_specifier IDENTIFIER PUNCTUATION .)
    INT             reduce using rule 10 (declaration -> type_specifier IDENTIFIER PUNCTUATION .)
    CHAR            reduce using rule 10 (declaration -> type_specifier IDENTIFIER PUNCTUATION .)
    PRINTF          reduce using rule 10 (declaration -> type_specifier IDENTIFIER PUNCTUATION .)
    SCANF           reduce using rule 10 (declaration -> type_specifier IDENTIFIER PUNCTUATION .)
    $end            reduce using rule 10 (declaration -> type_specifier IDENTIFIER PUNCTUATION .)
    PUNCTUATION     reduce using rule 10 (declaration -> type_specifier IDENTIFIER PUNCTUATION .)


state 31

    (13) assignment -> IDENTIFIER OPERATOR expression . PUNCTUATION
    (17) expression -> expression . OPERATOR expression

    PUNCTUATION     shift and go to state 39
    OPERATOR        shift and go to state 35


state 32

    (18) if_statement -> IF PUNCTUATION expression . PUNCTUATION compound_stmt
    (19) if_statement -> IF PUNCTUATION expression . PUNCTUATION compound_stmt ELSE compound_stmt
    (17) expression -> expression . OPERATOR expression

    PUNCTUATION     shift and go to state 40
    OPERATOR        shift and go to state 35


state 33

    (20) while_statement -> WHILE PUNCTUATION expression . PUNCTUATION compound_stmt
    (17) expression -> expression . OPERATOR expression

    PUNCTUATION     shift and go to state 41
    OPERATOR        shift and go to state 35


state 34

    (21) return_statement -> RETURN expression PUNCTUATION .

    IDENTIFIER      reduce using rule 21 (return_statement -> RETURN expression PUNCTUATION .)
    IF              reduce using rule 21 (return_statement -> RETURN expression PUNCTUATION .)
    WHILE           reduce using rule 21 (return_statement -> RETURN expression PUNCTUATION .)
    RETURN          reduce using rule 21 (return_statement -> RETURN expression PUNCTUATION .)
    INT             reduce using rule 21 (return_statement -> RETURN expression PUNCTUATION .)
    CHAR            reduce using rule 21 (return_statement -> RETURN expression PUNCTUATION .)
    PRINTF          reduce using rule 21 (return_statement -> RETURN expression PUNCTUATION .)
    SCANF           reduce using rule 21 (return_statement -> RETURN expression PUNCTUATION .)
    $end            reduce using rule 21 (return_statement -> RETURN expression PUNCTUATION .)
    PUNCTUATION     reduce using rule 21 (return_statement -> RETURN expression PUNCTUATION .)


state 35

    (17) expression -> expression OPERATOR . expression
    (14) expression -> . NUMBER
    (15) expression -> . IDENTIFIER
    (16) expression -> . STRING
    (17) expression -> . expression OPERATOR expression

    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    STRING          shift and go to state 28

    expression                     shift and go to state 42

state 36

    (23) call_statement -> function_name PUNCTUATION argument_list . PUNCTUATION PUNCTUATION
    (27) argument_list -> argument_list . PUNCTUATION expression

    PUNCTUATION     shift and go to state 43


state 37

    (28) argument_list -> expression .
    (17) expression -> expression . OPERATOR expression

    PUNCTUATION     reduce using rule 28 (argument_list -> expression .)
    OPERATOR        shift and go to state 35


state 38

    (29) argument_list -> empty .

    PUNCTUATION     reduce using rule 29 (argument_list -> empty .)


state 39

    (13) assignment -> IDENTIFIER OPERATOR expression PUNCTUATION .

    IDENTIFIER      reduce using rule 13 (assignment -> IDENTIFIER OPERATOR expression PUNCTUATION .)
    IF              reduce using rule 13 (assignment -> IDENTIFIER OPERATOR expression PUNCTUATION .)
    WHILE           reduce using rule 13 (assignment -> IDENTIFIER OPERATOR expression PUNCTUATION .)
    RETURN          reduce using rule 13 (assignment -> IDENTIFIER OPERATOR expression PUNCTUATION .)
    INT             reduce using rule 13 (assignment -> IDENTIFIER OPERATOR expression PUNCTUATION .)
    CHAR            reduce using rule 13 (assignment -> IDENTIFIER OPERATOR expression PUNCTUATION .)
    PRINTF          reduce using rule 13 (assignment -> IDENTIFIER OPERATOR expression PUNCTUATION .)
    SCANF           reduce using rule 13 (assignment -> IDENTIFIER OPERATOR expression PUNCTUATION .)
    $end            reduce using rule 13 (assignment -> IDENTIFIER OPERATOR expression PUNCTUATION .)
    PUNCTUATION     reduce using rule 13 (assignment -> IDENTIFIER OPERATOR expression PUNCTUATION .)


state 40

    (18) if_statement -> IF PUNCTUATION expression PUNCTUATION . compound_stmt
    (19) if_statement -> IF PUNCTUATION expression PUNCTUATION . compound_stmt ELSE compound_stmt
    (22) compound_stmt -> . PUNCTUATION statement_list PUNCTUATION

    PUNCTUATION     shift and go to state 44

    compound_stmt                  shift and go to state 45

state 41

    (20) while_statement -> WHILE PUNCTUATION expression PUNCTUATION . compound_stmt
    (22) compound_stmt -> . PUNCTUATION statement_list PUNCTUATION

    PUNCTUATION     shift and go to state 44

    compound_stmt                  shift and go to state 46

state 42

    (17) expression -> expression OPERATOR expression .
    (17) expression -> expression . OPERATOR expression

  ! shift/reduce conflict for OPERATOR resolved as shift
    PUNCTUATION     reduce using rule 17 (expression -> expression OPERATOR expression .)
    OPERATOR        shift and go to state 35

  ! OPERATOR        [ reduce using rule 17 (expression -> expression OPERATOR expression .) ]


state 43

    (23) call_statement -> function_name PUNCTUATION argument_list PUNCTUATION . PUNCTUATION
    (27) argument_list -> argument_list PUNCTUATION . expression
    (14) expression -> . NUMBER
    (15) expression -> . IDENTIFIER
    (16) expression -> . STRING
    (17) expression -> . expression OPERATOR expression

    PUNCTUATION     shift and go to state 47
    NUMBER          shift and go to state 26
    IDENTIFIER      shift and go to state 27
    STRING          shift and go to state 28

    expression                     shift and go to state 48

state 44

    (22) compound_stmt -> PUNCTUATION . statement_list PUNCTUATION
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . call_statement
    (10) declaration -> . type_specifier IDENTIFIER PUNCTUATION
    (13) assignment -> . IDENTIFIER OPERATOR expression PUNCTUATION
    (18) if_statement -> . IF PUNCTUATION expression PUNCTUATION compound_stmt
    (19) if_statement -> . IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt
    (20) while_statement -> . WHILE PUNCTUATION expression PUNCTUATION compound_stmt
    (21) return_statement -> . RETURN expression PUNCTUATION
    (23) call_statement -> . function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION
    (11) type_specifier -> . INT
    (12) type_specifier -> . CHAR
    (24) function_name -> . IDENTIFIER
    (25) function_name -> . PRINTF
    (26) function_name -> . SCANF

    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    RETURN          shift and go to state 14
    INT             shift and go to state 16
    CHAR            shift and go to state 17
    PRINTF          shift and go to state 18
    SCANF           shift and go to state 19

    statement_list                 shift and go to state 49
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    call_statement                 shift and go to state 9
    type_specifier                 shift and go to state 10
    function_name                  shift and go to state 15

state 45

    (18) if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt .
    (19) if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt . ELSE compound_stmt

    IDENTIFIER      reduce using rule 18 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt .)
    IF              reduce using rule 18 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt .)
    WHILE           reduce using rule 18 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt .)
    RETURN          reduce using rule 18 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt .)
    INT             reduce using rule 18 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt .)
    CHAR            reduce using rule 18 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt .)
    PRINTF          reduce using rule 18 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt .)
    SCANF           reduce using rule 18 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt .)
    $end            reduce using rule 18 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt .)
    PUNCTUATION     reduce using rule 18 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt .)
    ELSE            shift and go to state 50


state 46

    (20) while_statement -> WHILE PUNCTUATION expression PUNCTUATION compound_stmt .

    IDENTIFIER      reduce using rule 20 (while_statement -> WHILE PUNCTUATION expression PUNCTUATION compound_stmt .)
    IF              reduce using rule 20 (while_statement -> WHILE PUNCTUATION expression PUNCTUATION compound_stmt .)
    WHILE           reduce using rule 20 (while_statement -> WHILE PUNCTUATION expression PUNCTUATION compound_stmt .)
    RETURN          reduce using rule 20 (while_statement -> WHILE PUNCTUATION expression PUNCTUATION compound_stmt .)
    INT             reduce using rule 20 (while_statement -> WHILE PUNCTUATION expression PUNCTUATION compound_stmt .)
    CHAR            reduce using rule 20 (while_statement -> WHILE PUNCTUATION expression PUNCTUATION compound_stmt .)
    PRINTF          reduce using rule 20 (while_statement -> WHILE PUNCTUATION expression PUNCTUATION compound_stmt .)
    SCANF           reduce using rule 20 (while_statement -> WHILE PUNCTUATION expression PUNCTUATION compound_stmt .)
    $end            reduce using rule 20 (while_statement -> WHILE PUNCTUATION expression PUNCTUATION compound_stmt .)
    PUNCTUATION     reduce using rule 20 (while_statement -> WHILE PUNCTUATION expression PUNCTUATION compound_stmt .)


state 47

    (23) call_statement -> function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION .

    IDENTIFIER      reduce using rule 23 (call_statement -> function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION .)
    IF              reduce using rule 23 (call_statement -> function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION .)
    WHILE           reduce using rule 23 (call_statement -> function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION .)
    RETURN          reduce using rule 23 (call_statement -> function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION .)
    INT             reduce using rule 23 (call_statement -> function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION .)
    CHAR            reduce using rule 23 (call_statement -> function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION .)
    PRINTF          reduce using rule 23 (call_statement -> function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION .)
    SCANF           reduce using rule 23 (call_statement -> function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION .)
    $end            reduce using rule 23 (call_statement -> function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION .)
    PUNCTUATION     reduce using rule 23 (call_statement -> function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION .)


state 48

    (27) argument_list -> argument_list PUNCTUATION expression .
    (17) expression -> expression . OPERATOR expression

    PUNCTUATION     reduce using rule 27 (argument_list -> argument_list PUNCTUATION expression .)
    OPERATOR        shift and go to state 35


state 49

    (22) compound_stmt -> PUNCTUATION statement_list . PUNCTUATION
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . return_statement
    (9) statement -> . call_statement
    (10) declaration -> . type_specifier IDENTIFIER PUNCTUATION
    (13) assignment -> . IDENTIFIER OPERATOR expression PUNCTUATION
    (18) if_statement -> . IF PUNCTUATION expression PUNCTUATION compound_stmt
    (19) if_statement -> . IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt
    (20) while_statement -> . WHILE PUNCTUATION expression PUNCTUATION compound_stmt
    (21) return_statement -> . RETURN expression PUNCTUATION
    (23) call_statement -> . function_name PUNCTUATION argument_list PUNCTUATION PUNCTUATION
    (11) type_specifier -> . INT
    (12) type_specifier -> . CHAR
    (24) function_name -> . IDENTIFIER
    (25) function_name -> . PRINTF
    (26) function_name -> . SCANF

    PUNCTUATION     shift and go to state 51
    IDENTIFIER      shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    RETURN          shift and go to state 14
    INT             shift and go to state 16
    CHAR            shift and go to state 17
    PRINTF          shift and go to state 18
    SCANF           shift and go to state 19

    statement                      shift and go to state 20
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    return_statement               shift and go to state 8
    call_statement                 shift and go to state 9
    type_specifier                 shift and go to state 10
    function_name                  shift and go to state 15

state 50

    (19) if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE . compound_stmt
    (22) compound_stmt -> . PUNCTUATION statement_list PUNCTUATION

    PUNCTUATION     shift and go to state 44

    compound_stmt                  shift and go to state 52

state 51

    (22) compound_stmt -> PUNCTUATION statement_list PUNCTUATION .

    ELSE            reduce using rule 22 (compound_stmt -> PUNCTUATION statement_list PUNCTUATION .)
    IDENTIFIER      reduce using rule 22 (compound_stmt -> PUNCTUATION statement_list PUNCTUATION .)
    IF              reduce using rule 22 (compound_stmt -> PUNCTUATION statement_list PUNCTUATION .)
    WHILE           reduce using rule 22 (compound_stmt -> PUNCTUATION statement_list PUNCTUATION .)
    RETURN          reduce using rule 22 (compound_stmt -> PUNCTUATION statement_list PUNCTUATION .)
    INT             reduce using rule 22 (compound_stmt -> PUNCTUATION statement_list PUNCTUATION .)
    CHAR            reduce using rule 22 (compound_stmt -> PUNCTUATION statement_list PUNCTUATION .)
    PRINTF          reduce using rule 22 (compound_stmt -> PUNCTUATION statement_list PUNCTUATION .)
    SCANF           reduce using rule 22 (compound_stmt -> PUNCTUATION statement_list PUNCTUATION .)
    $end            reduce using rule 22 (compound_stmt -> PUNCTUATION statement_list PUNCTUATION .)
    PUNCTUATION     reduce using rule 22 (compound_stmt -> PUNCTUATION statement_list PUNCTUATION .)


state 52

    (19) if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt .

    IDENTIFIER      reduce using rule 19 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt .)
    IF              reduce using rule 19 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt .)
    WHILE           reduce using rule 19 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt .)
    RETURN          reduce using rule 19 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt .)
    INT             reduce using rule 19 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt .)
    CHAR            reduce using rule 19 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt .)
    PRINTF          reduce using rule 19 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt .)
    SCANF           reduce using rule 19 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt .)
    $end            reduce using rule 19 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt .)
    PUNCTUATION     reduce using rule 19 (if_statement -> IF PUNCTUATION expression PUNCTUATION compound_stmt ELSE compound_stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OPERATOR in state 42 resolved as shift
